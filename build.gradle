plugins {
  id "com.hkmc.h2" version "1.0.105"
}

group = "com.hkmc.ccs"
version = "1.0.32"

cloudnative {
  microservice {
    openfeign = true
  }

  persistent {
    jpa = true
    postgresql = true
  }

  thirdparty {
    commonsLang = true
    commonsCollections = true
    prometheusRSocket = true
    jasypt = true
  }

  cicd {
    container {
      enabled = true
      to = "registry.hcloud.hmc.co.kr/ccs/${project.name}"
      //jvmOption = "-XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:InitialRAMPercentage=50 -XX:MinRAMPercentage=50 -XX:MaxRAMPercentage=75"
    }

    helm {
      name = "metering"
      namespace = "metering"
      serviceType = "ClusterIP"
      servicePort = 8080

      requestsMem = "3Gi"   // k8s request resource memory 설정
      requestsCpu = "500m"  // k8s request resource cpu 설정 0.5 Core

      limitsMem = "3Gi"  // requestMem 와 같게 설정
      limitsCpu = "500m" // 1 Core (멀티 프로세스 활용한 코딩을 진행하지 않았다면 1Core 사용)

    }

    deploy {
      oldStyleNaming = true    // 기존 argocd 파이프라인 네이밍 방식 , false 하게 되면 downtime 발생되어 무조건 true!!
      strategy = "BLUE-GREEN" // or ROLLING-UPDATE

      targets = [
              [region: "ap-northeast", target: "dev", min: 1, max: 1],
//      [region: "ap-northeast", target: "stg", min: 1, max: 1],
//      [region: "ap-northeast", target: "prd", min: 16, max: 16]
      ]

    }
  }
}

dependencies {
  testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'io.micrometer:micrometer-registry-statsd:1.9.2'
  implementation group: 'co.elastic.apm', name: 'elastic-apm-agent', version: '1.34.1'
}